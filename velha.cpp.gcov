        -:    0:Source:velha.cpp
        -:    1:#include "velha.hpp"
        -:    2:
       21:    3:int verifica_jogo(int tabuleiro[3][3]) {
        -:    4:    // 1. Verificar se todas as casas do tabuleiro são iguais
       21:    5:    bool todas_iguais = true;
       21:    6:    int primeiro = tabuleiro[0][0];  // Valor da primeira casa
       21:    7:    if (primeiro == 0) {
        7:    8:        todas_iguais = false;  // Casas vazias não contam como iguais
        -:    9:    } else {
       22:   10:        for (int i = 0; i < 3; ++i) {
       54:   11:            for (int j = 0; j < 3; ++j) {
       46:   12:                if (tabuleiro[i][j] != primeiro) {
       12:   13:                    todas_iguais = false;
       12:   14:                    break;
        -:   15:                }
        -:   16:            }
       20:   17:            if (!todas_iguais) {
       12:   18:                break;
        -:   19:            }
        -:   20:        }
        -:   21:    }
        -:   22:
       21:   23:    if (todas_iguais) {
        2:   24:        return -2;  // Jogo impossível
        -:   25:    }
        -:   26:
        -:   27:    // 2. Verificar se há um vencedor
       52:   28:    for (int i = 0; i < 3; ++i) {
       45:   29:        if (tabuleiro[i][0] == tabuleiro[i][1] && tabuleiro[i][1] == tabuleiro[i][2] && tabuleiro[i][0] != 0) {
        6:   30:            return tabuleiro[i][0];  // Retorna o vencedor (1 ou 2)
        -:   31:        }
       39:   32:        if (tabuleiro[0][i] == tabuleiro[1][i] && tabuleiro[1][i] == tabuleiro[2][i] && tabuleiro[0][i] != 0) {
        6:   33:            return tabuleiro[0][i];  // Retorna o vencedor (1 ou 2)
        -:   34:        }
        -:   35:    }
        -:   36:
        -:   37:    // Verificar as diagonais
        7:   38:    if (tabuleiro[0][0] == tabuleiro[1][1] && tabuleiro[1][1] == tabuleiro[2][2] && tabuleiro[0][0] != 0) {
        2:   39:        return tabuleiro[0][0];
        -:   40:    }
        5:   41:    if (tabuleiro[0][2] == tabuleiro[1][1] && tabuleiro[1][1] == tabuleiro[2][0] && tabuleiro[0][2] != 0) {
        2:   42:        return tabuleiro[0][2];
        -:   43:    }
        -:   44:
        -:   45:    // 3. Verificar se há posições vazias (jogo indefinido)
        6:   46:    for (int i = 0; i < 3; ++i) {
       15:   47:        for (int j = 0; j < 3; ++j) {
       12:   48:            if (tabuleiro[i][j] == 0) {
        2:   49:                return -1;  // Jogo indefinido
        -:   50:            }
        -:   51:        }
        -:   52:    }
        -:   53:
        -:   54:    // 4. Se não houver vencedor, o jogo está empatado
        1:   55:    return 0;
        -:   56:}
