        -:    0:Source:testa_velha.cpp
        -:    1:#define CATCH_CONFIG_MAIN  // Isso diz ao Catch2 para fornecer uma função main()
        -:    2:#include "catch.hpp" 
        -:    3:#include "velha.hpp"
        -:    4:
        -:    5:
        -:    6:int verifica_jogo(int tabuleiro[3][3]);  // Declaração da função verifica_jogo
        -:    7:
        -:    8://TESTE DE JOGO VAZIO - VERIFICA SE AS CASAS ESTÃO VAZIAS 
        -:    9:int verifica_jogo(int tabuleiro[3][3]);  // Declaração da função verifica_jogo
        -:   10:
        -:   11://TESTE DE JOGO VAZIO - VERIFICA SE AS CASAS ESTÃO VAZIAS 
        1:   12:TEST_CASE("Jogo vazio retorna indefinido", "[verifica_jogo]") {
        1:   13:    int tabuleiro[3][3] = {
        -:   14:        {0, 0, 0},
        -:   15:        {0, 0, 0},
        -:   16:        {0, 0, 0}
        -:   17:    };
       1*:   18:    REQUIRE(verifica_jogo(tabuleiro) == -1); 
        1:   19:}
        -:   20:
        1:   21:TEST_CASE("Jogo com apenas uma marcação retorna indefinido", "[verifica_jogo]") {
        1:   22:    int tabuleiro[3][3] = {
        -:   23:        {1, 0, 0},
        -:   24:        {0, 0, 0},
        -:   25:        {0, 0, 0}
        -:   26:    };
       1*:   27:    REQUIRE(verifica_jogo(tabuleiro) == -1);
        1:   28:}
        -:   29:
        -:   30://TESTES DAS POSSIBILIDADES DE VITÓRIA DE "X"
        -:   31:
        1:   32:TEST_CASE("Vitória do X na primeira linha", "[verifica_jogo]") {
        1:   33:    int tabuleiro[3][3] = {
        -:   34:        {1, 1, 1},
        -:   35:        {0, 2, 2},
        -:   36:        {2, 0, 0}
        -:   37:    };
       1*:   38:    REQUIRE(verifica_jogo(tabuleiro) == 1);
        1:   39:}
        -:   40:
        1:   41:TEST_CASE("Vitória do X na segunda linha", "[verifica_jogo]") {
        1:   42:    int tabuleiro[3][3] = {
        -:   43:        {2, 0, 1},
        -:   44:        {1, 1, 1},
        -:   45:        {0, 2, 2}
        -:   46:    };
       1*:   47:    REQUIRE(verifica_jogo(tabuleiro) == 1);
        1:   48:}
        -:   49:
        1:   50:TEST_CASE("Vitória do X na terceira linha", "[verifica_jogo]") {
        1:   51:    int tabuleiro[3][3] = {
        -:   52:        {2, 0, 1},
        -:   53:        {0, 2, 2},
        -:   54:        {1, 1, 1}
        -:   55:    };
       1*:   56:    REQUIRE(verifica_jogo(tabuleiro) == 1);
        1:   57:}
        -:   58:
        1:   59:TEST_CASE("Vitória do X na primeira coluna", "[verifica_jogo]") {
        1:   60:    int tabuleiro[3][3] = {
        -:   61:        {1, 0, 2},
        -:   62:        {1, 2, 0},
        -:   63:        {1, 0, 2}
        -:   64:    };
       1*:   65:    REQUIRE(verifica_jogo(tabuleiro) == 1);
        1:   66:}
        -:   67:
        1:   68:TEST_CASE("Vitória do X na segunda coluna", "[verifica_jogo]") {
        1:   69:    int tabuleiro[3][3] = {
        -:   70:        {0, 1, 2},
        -:   71:        {2, 1, 0},
        -:   72:        {0, 1, 2}
        -:   73:    };
       1*:   74:    REQUIRE(verifica_jogo(tabuleiro) == 1);
        1:   75:}
        -:   76:
        1:   77:TEST_CASE("Vitória do X na terceira coluna", "[verifica_jogo]") {
        1:   78:    int tabuleiro[3][3] = {
        -:   79:        {0, 2, 1},
        -:   80:        {2, 0, 1},
        -:   81:        {0, 2, 1}
        -:   82:    };
       1*:   83:    REQUIRE(verifica_jogo(tabuleiro) == 1);
        1:   84:}
        -:   85:
        1:   86:TEST_CASE("Vitória do X na diagonal principal", "[verifica_jogo]") {
        1:   87:    int tabuleiro[3][3] = {
        -:   88:        {1, 0, 2},
        -:   89:        {0, 1, 0},
        -:   90:        {2, 0, 1}
        -:   91:    };
       1*:   92:    REQUIRE(verifica_jogo(tabuleiro) == 1);
        1:   93:}
        -:   94:
        1:   95:TEST_CASE("Vitória do X na diagonal secundária", "[verifica_jogo]") {
        1:   96:    int tabuleiro[3][3] = {
        -:   97:        {0, 2, 1},
        -:   98:        {0, 1, 0},
        -:   99:        {1, 2, 0}
        -:  100:    };
       1*:  101:    REQUIRE(verifica_jogo(tabuleiro) == 1);
        1:  102:}
        -:  103:
        -:  104://TESTES DAS POSSIBILIDADES DE VITÓRIA DE "O"
        -:  105:
        1:  106:TEST_CASE("Vitória do O na primeira linha", "[verifica_jogo]") {
        1:  107:    int tabuleiro[3][3] = {
        -:  108:        {2, 2, 2},
        -:  109:        {0, 1, 1},
        -:  110:        {1, 0, 0}
        -:  111:    };
       1*:  112:    REQUIRE(verifica_jogo(tabuleiro) == 2); 
        1:  113:}
        -:  114:
        1:  115:TEST_CASE("Vitória do O na segunda linha", "[verifica_jogo]") {
        1:  116:    int tabuleiro[3][3] = {
        -:  117:        {1, 0, 2},
        -:  118:        {2, 2, 2},
        -:  119:        {0, 1, 1}
        -:  120:    };
       1*:  121:    REQUIRE(verifica_jogo(tabuleiro) == 2); 
        1:  122:}
        -:  123:
        1:  124:TEST_CASE("Vitória do O na terceira linha", "[verifica_jogo]") {
        1:  125:    int tabuleiro[3][3] = {
        -:  126:        {1, 0, 2},
        -:  127:        {0, 1, 1},
        -:  128:        {2, 2, 2}
        -:  129:    };
       1*:  130:    REQUIRE(verifica_jogo(tabuleiro) == 2); // Corrigido para 2 (vitória do O)
        1:  131:}
        -:  132:
        1:  133:TEST_CASE("Vitória do O na primeira coluna", "[verifica_jogo]") {
        1:  134:    int tabuleiro[3][3] = {
        -:  135:        {2, 0, 1},
        -:  136:        {2, 1, 0},
        -:  137:        {2, 0, 1}
        -:  138:    };
       1*:  139:    REQUIRE(verifica_jogo(tabuleiro) == 2); // Corrigido para 2 (vitória do O)
        1:  140:}
        -:  141:
        1:  142:TEST_CASE("Vitória do O na segunda coluna", "[verifica_jogo]") {
        1:  143:    int tabuleiro[3][3] = {
        -:  144:        {0, 2, 1},
        -:  145:        {1, 2, 0},
        -:  146:        {0, 2, 1}
        -:  147:    };
       1*:  148:    REQUIRE(verifica_jogo(tabuleiro) == 2); // Corrigido para 2 (vitória do O)
        1:  149:}
        -:  150:
        1:  151:TEST_CASE("Vitória do O na terceira coluna", "[verifica_jogo]") {
        1:  152:    int tabuleiro[3][3] = {
        -:  153:        {0, 1, 2},
        -:  154:        {1, 0, 2},
        -:  155:        {0, 1, 2}
        -:  156:    };
       1*:  157:    REQUIRE(verifica_jogo(tabuleiro) == 2); // Corrigido para 2 (vitória do O)
        1:  158:}
        -:  159:
        1:  160:TEST_CASE("Vitória do O na diagonal principal", "[verifica_jogo]") {
        1:  161:    int tabuleiro[3][3] = {
        -:  162:        {2, 0, 1},
        -:  163:        {0, 2, 0},
        -:  164:        {1, 0, 2}
        -:  165:    };
       1*:  166:    REQUIRE(verifica_jogo(tabuleiro) == 2); // Corrigido para 2 (vitória do O)
        1:  167:}
        -:  168:
        1:  169:TEST_CASE("Vitória do O na diagonal secundária", "[verifica_jogo]") {
        1:  170:    int tabuleiro[3][3] = {
        -:  171:        {0, 1, 2},
        -:  172:        {0, 2, 0},
        -:  173:        {2, 1, 0}
        -:  174:    };
       1*:  175:    REQUIRE(verifica_jogo(tabuleiro) == 2); // Corrigido para 2 (vitória do O)
        1:  176:}
        -:  177:
        -:  178:// TESTE DE JOGO EMPATADO
        -:  179:
        1:  180:TEST_CASE("Jogo empatado", "[verifica_jogo]") {
        1:  181:    int tabuleiro[3][3] = {
        -:  182:        {1, 2, 1},
        -:  183:        {1, 2, 2},
        -:  184:        {2, 1, 1}
        -:  185:    };
       1*:  186:    REQUIRE(verifica_jogo(tabuleiro) == 0);
        1:  187:}
        -:  188:// TESTE JOGO IMPOSSÍVEL 
        -:  189:
        1:  190:TEST_CASE("Jogo impossível - Todas as casas são X", "[verifica_jogo]") {
        1:  191:    int tabuleiro[3][3] = {
        -:  192:        {1, 1, 1},
        -:  193:        {1, 1, 1},
        -:  194:        {1, 1, 1}
        -:  195:    };
       1*:  196:    REQUIRE(verifica_jogo(tabuleiro) == -2);  // Jogo impossível, todas as casas são X
        1:  197:}
        -:  198:
        1:  199:TEST_CASE("Jogo impossível - Todas as casas são O", "[verifica_jogo]") {
        1:  200:    int tabuleiro[3][3] = {
        -:  201:        {2, 2, 2},
        -:  202:        {2, 2, 2},
        -:  203:        {2, 2, 2}
        -:  204:    };
       1*:  205:    REQUIRE(verifica_jogo(tabuleiro) == -2);  // Jogo impossível, todas as casas são O
        1:  206:}
        -:  207:
        -:  208:
